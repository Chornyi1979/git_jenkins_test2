def getAvailableVersions() {
    def versions = []
    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
        sh "echo $PASS | docker login -u $USER --password-stdin"
        def command = "docker image ls --format '{{.Tag}}' chornyi1979/my-repo"
        def process = sh(script: command, returnStdout: true)
        versions = process.text.trim().split('\n')
    }
    return versions
}


def incrementVersion() {
	echo "incrementing app version ..."
    sh 'mvn build-helper:parse-version versions:set \
        -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} \
        versions:commit'
    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
    def version = matcher[0][1]
    env.IMAGE_NAME = "$version-$BUILD_NUMBER"
}

def buildJar() {
	echo "building the application..."
	sh 'mvn clean package'
}

def buildImage() {
	echo "building the docker image..."
    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
        sh "docker build -t chornyi1979/my-repo:${IMAGE_NAME} ."
        sh "docker tag chornyi1979/my-repo:${IMAGE_NAME} chornyi1979/my-repo:latest"
        sh "docker tag chornyi1979/my-repo:${IMAGE_NAME} chornyi1979/my-repo:${BUILD_NUMBER}"
        sh ('echo $PASS | docker login -u $USER --password-stdin')
        sh "docker push chornyi1979/my-repo:latest"
        sh "docker push chornyi1979/my-repo:${IMAGE_NAME}"
        sh "docker images -q chornyi1979/my-repo:latest | xargs docker rmi -f"
	}
}

def deployApp() {
    withCredentials([azureServicePrincipal(credentialsId: 'MyLabServicePrincipal', tenantIdVariable: 'TENANT_ID', clientIdVariable: 'CLIENT_ID', clientSecretVariable: 'CLIENT_SECRET')]) {
        sh 'mvn azure-webapp:deploy'
    }
}

def healthcheck() {
    def response = sh(script: "curl -s -o /dev/null -w '%{http_code}' https://my-app-cont.azurewebsites.net", returnStdout: true).trim()
    if (response == '200') {
        echo "Healthcheck passed"
    } else {
        error "Healthcheck failed with response code ${response}"
    }
}

def commitVersionUpdate() {
	withCredentials([usernamePassword(credentialsId: 'GitHub', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
		sh 'git config --global user.email "jenkins@example.com"'
		sh 'git config --global user.name "jenkins"'
		sh 'git status'
		sh 'git branch'
		sh 'git config --list'
		sh ('git remote set-url origin https://$USER:$PASS@github.com/Chornyi1979/git_jenkins_test2.git')
		sh 'git add .'
		sh 'git commit -m "ci: version bump"'
                sh 'git push origin HEAD:main'
	        
	}
}	

return this
